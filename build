#!/usr/bin/env bash
#
# TROUBLESHOOTING
#   - See the 'options' array.  Comment/uncomment lines as you see fit.
#   - If you see 'undefined reference to `clock_gettime'', try ./build -lrt instead.
#
# BUGS
#   masterpassword@lyndir.com
#
# AUTHOR
#   Maarten Billemont
#
cd "${BASH_SOURCE%/*}"
shopt -s extglob
set -e

# optional features.
options=(
   #-DDEBUG                     # Turn on debugging verbosity.
)
# available targets.
targets=(
    mpw                         # C CLI version of Master Password.
   #mpw-bench                   # C CLI Master Password benchmark utility.
)


### DEPENDENCIES

fetch() {
    if hash wget 2>/dev/null; then
        wget -O "${1##*/}" "$1"
    elif hash curl 2>/dev/null; then
        curl "$1" > "${1##*/}"
    fi
}
fetchSource() (
    echo
    echo "Fetching dependency ${PWD##*/}..."
    source .source

    if [[ $git ]] && hash git 2>/dev/null; then
        echo
        echo "Fetching ${PWD##*/} using git..."
        git-svn clone --prefix=origin/ --stdlayout "$svn" .
        printf '%s' "$(git describe --always)" > "${PWD##*/}-version"
        return

    elif [[ $svn ]] && hash git-svn 2>/dev/null; then
        echo
        echo "Fetching ${PWD##*/} using git-svn..."
        git-svn clone --prefix=origin/ --stdlayout "$svn" .
        printf '%s' "$(git describe --always)" > "${PWD##*/}-version"
        return

    elif [[ $svn ]] && hash svn 2>/dev/null; then
        echo
        echo "Fetching ${PWD##*/} using svn..."
        svn checkout "$svn/trunk" .
        printf 'r%s' "$(svn info | awk '/^Revision:/{ print $2 }')" > "${PWD##*/}-version"
        return

    elif [[ $pkg ]]; then
        set -x
        fetch "$pkg"
        if [[ $pkg = *.tar.gz || $pkg = *.tgz ]]; then
            tar -xvzf "${pkg##*/}"
            files=(!("${pkg##*/}"))
            if [[ -d $files ]] && (( ${#files[@]} == 1 )); then
                mv "$files"/* .
                rmdir "$files"
            fi
        fi
        return

    fi

    echo >&2 "error: Missing git-svn or svn."
    echo >&2 "error: Please install either or manually check out the sources"
    echo >&2 "error: from: $home"
    echo >&2 "error: into: $PWD"
    exit 1
)
depend() {

    echo
    echo "Checking dependency $1..."
    objects=( "lib/$1"/*.o )
    [[ -e $objects ]] && return

    pushd "lib/$1"
    files=( * )
    [[ -e $files ]] || fetchSource

    echo
    echo "Configuring dependency $1..."
    if [[ -e configure.ac ]]; then
        if [[ ! -e configure ]]; then
            # create configure using autotools.
            aclocal
            autoheader
            autoconf
            mkdir -p config.aux
            automake --add-missing
        fi
    fi

    if [[ -e configure ]]; then
        ./configure
    fi

    echo
    echo "Building dependency $1..."
    if [[ -e Makefile ]]; then
        make
    else
        echo >&2 "error: Don't know how to build: $1"
        exit 1
    fi
    popd
}


### MPW
mpw() {
    depend scrypt

    echo "Building target: $target..."
    CFLAGS=(
        # include paths
        -I"lib/scrypt/lib" -I"lib/scrypt/libcperciva"
    )
    LDFLAGS=(
        # library paths
        -L"." -L"lib/scrypt"
        # link libraries
        -l"crypto"
        # scrypt
        "lib/scrypt/scrypt-crypto_aesctr.o"
        "lib/scrypt/scrypt-sha256.o"
        "lib/scrypt/scrypt-crypto_scrypt-nosse.o"
        "lib/scrypt/scrypt-memlimit.o"
        "lib/scrypt/scrypt-scryptenc_cpuperf.o"
        "lib/scrypt/scrypt-scryptenc.o"
    )

    cc "${CFLAGS[@]}"                 "${options[@]}" -c types.c -o types.o "$@"
    cc "${CFLAGS[@]}" "${LDFLAGS[@]}" "${options[@]}" "types.o" mpw.c -o mpw "$@"
    echo "done!  Now run ./install or use ./mpw"
}


### MPW-BENCH
mpw-bench() {
    depend scrypt
    depend bcrypt

    echo "Building target: $target..."
    CFLAGS=(
        # include paths
        -I"lib/scrypt/lib" -I"lib/scrypt/libcperciva"
        -I"lib/bcrypt" 
    )
    LDFLAGS=(
        # library paths
        -L"." -L"lib/scrypt"
        -L"lib/bcrypt"
        # libraries
        -l"crypto"
        # scrypt
        "lib/scrypt/scrypt-crypto_aesctr.o"
        "lib/scrypt/scrypt-sha256.o"
        "lib/scrypt/scrypt-crypto_scrypt-nosse.o"
        "lib/scrypt/scrypt-memlimit.o"
        "lib/scrypt/scrypt-scryptenc_cpuperf.o"
        "lib/scrypt/scrypt-scryptenc.o"
        # bcrypt
        "lib/bcrypt/crypt_blowfish.o"
        "lib/bcrypt/crypt_gensalt.o"
        "lib/bcrypt/wrapper.o"
        "lib/bcrypt/x86.o"
    )

    cc "${CFLAGS[@]}"                 "${options[@]}" -c types.c -o types.o "$@"
    cc "${CFLAGS[@]}" "${LDFLAGS[@]}" "${options[@]}" "types.o" mpw-bench.c -o mpw-bench "$@"
    echo "done!  Now use ./mpw-bench"
}


### TARGETS

cc() {
    if hash llvm-gcc 2>/dev/null; then
        llvm-gcc "$@"
    else
        gcc -std=gnu99 "$@"
    fi
}

for target in "${targets[@]}"; do
    echo
    "$target" "$@"
done
